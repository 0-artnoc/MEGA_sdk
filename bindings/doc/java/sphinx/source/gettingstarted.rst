===============
Getting Started
===============

------------
Introduction
------------

.. nature of binding: uses SWIG library to build, then uses API classes to improve usability of raw SWIG bindings, working async in C++

MEGA, `The Privacy Company`, is a Secure Cloud Storage provider that protects your data using automatically managed end-to-end encryption.

All files stored on MEGA are encrypted. All data transfers from and to MEGA are encrypted. While most cloud storage providers claim the same, MEGA is different. Unlike the industry norm where the cloud storage provider holds the decryption key, with MEGA, you control the encryption. You hold the keys and you decide who you grant or deny access to your files. We call it User Controlled Encryption (UCE).

MEGA Ltd provides a Software Development Kit (SDK) for its cloud storage services. The MEGA SDK is developed and maintained in C++. In order to facilitate development of third-party applications using MEGA services, MEGA provides bindings to the core C++ functionality for several high-level languages, including Java.

This guide describes how to install the MEGA SDK Java bindings and explains the basic principles of use.

^^^^
SWIG
^^^^

The additional language bindings are automatically generated by the Simplified Wrapper and Interface Generator (SWIG) open source tool.

    `"SWIG is an interface compiler that connects programs written in C and C++ with scripting languages such as Perl, Python, Ruby, and Tcl. It works by taking the declarations found in C/C++ header files and using them to generate the wrapper code that scripting languages need to access the underlying C/C++ code."` 

For more information, please visit: http://www.swig.org/

Updates to the SDK are carried out by modifying the C++ code then re-generating the bindings using SWIG. This has the benefit of adding functionality to all language bindings from a single central source, without the need to add the change to each language's bindings manually.

^^^^^^^^^^^^
API Bindings
^^^^^^^^^^^^

In order to make the automatically generated SWIG bindings more usable for developers, language native Application Programming Interfaces (APIs) are developed. These APIs are written in the native language, not SWIG generated. They aim to follow native language conventions and attempt to handle C++ differences, such as garbage handling, in the background. This frees up the developer to concentrate on developing solutions, not learning how to interface with C++ in their preferred language.

^^^^^^^^^^^^
Asynchronous
^^^^^^^^^^^^

In order to speed up the process of interacting with MEGA services, common functionality is carried out on separate threads from the core C++ code.

----------------------------------------
Installation
----------------------------------------

Before you are able to start implementing the various functionality of the MEGA bindings you will of course need to compile and install them.

* :ref:`installsdk`

-------------------
Concepts
-------------------

There are some features of the SDK which **must** be used in order for the functionality of the SDK to work correctly.

^^^^^^^^
Sessions
^^^^^^^^

@TODO:
Session Description and application

^^^^^^^^^
Listeners
^^^^^^^^^

@TODO:
What and Why Listeners are needed
How to use Listeners

^^^^^^^^^^^^^^^^^
Referencing Nodes
^^^^^^^^^^^^^^^^^

@TODO:
why and How to reference nodes

---------------------------
Basic Functionality (CRUD)
---------------------------

These steps will help you use the basic Mega functionality, such as:
 * Login
 * **Create**
 * **Read**
 * **Upload**
 * **Delete**
 * Log out

^^^^^
Login
^^^^^

First to access the Mega services the user must have a valid account and login.
To do this you can use the Mega API login functionality.

.. code:: java

            // Log in
            megaApiJava.login(userEmail, password);
            
	

Of course this will require retrieving the user's user name and password and passing this to the function.
There are other ways of calling this function please check these in the JavaDocs.

Once logged in you will be able to do a number of basic features. Let's start with "Create".

^^^^^^
Create
^^^^^^

Below you will see the function for the creation of a node. This is the function used to create a File or "Node" in the Mega system.

.. code:: java

	//Create/Upload
        megaApiJava.startUpload("README.md", currentWorkingDirectory);

This example shows the upload of a file called README.md to the current directory the user is working in.    
Simply calls the startUpload() method and passes the file name string and the directory.
There are other ways of calling this function please check these in the JavaDocs.

next we have "Read"

^^^^
Read
^^^^

Being able to retrieve and read the files which you have uploaded is a very handy feature, This is provided by the below piece of code.

.. code:: java

        MegaNode fileToDownload = megaApiJava.getNodeByPath("README.md", currentWorkingDirectory);

Here we have saved the file as a MegaNode this is because the getNodeByPath returns a MegaNode. Again the name of the file and the directory are required.
There are other ways of calling this function please check these in the JavaDocs.

You may want to upload an existing file from you local directory to the Mega Cloud, To do this you will need to "Upload" it.

^^^^^^
Upload
^^^^^^
Below you will see an example of a readme.md file being uploaded.

.. code:: java

        MegaNode oldNode = megaApiJava.getNodeByPath("README.md", currentWorkingDirectory);
        megaApiJava.startUpload("README.md", currentWorkingDirectory, this);

        if (oldNode != null) {
            // Remove the old node with the same name.
            fileName = oldNode.getName();
            megaApiJava.remove(oldNode);

If there is an old node with the same name you may want to delete that node before uploading the new node.

Oops looks like you uploaded a file you didn't want to upload or you want to "Delete" a file. That's OK because that's our next section.

^^^^^^
Delete
^^^^^^

To remove a file from the Mega Cloud simply call the below method with the node you wish to remove.

.. code:: java

            megaApiJava.remove(node, this);

-------------------
Cleaning Up
-------------------
@TODO How to tidy up (if necessary) when ending the application's MEGA session.

And that's it your now ready to start storing your info onto the Mega Cloud.
For more detailed information we have a brief how to on each of the functions, or if you want the specifics only you can check out the JavaDoc.
