===============
Getting Started
===============

----------------------------------------
How To compile and install Java Bindings
----------------------------------------

Before you are able to start implementing the various functionality 
of the Mega bindings you will of course need to compile and install them.

* :ref:`installsdk`

----------------------------
Introduction to the Bindings
----------------------------

Now that you have the SDK compiled and installed,
 we shall give you a bit of understanding as to the nature of the bindings.

~~~~~~~~~~~~
The Creation
~~~~~~~~~~~~

The bindings have been automatically generated by SWIG, which is defined as :

"SWIG is an interface compiler that connects programs written in C and C++ with scripting languages such as Perl, Python, Ruby, and Tcl. It works by taking the declarations found in C/C++ header files and using them to generate the wrapper code that scripting languages need to access the underlying C/C++ code. In addition, SWIG provides a variety of customization features that let you tailor the wrapping process to suit your application."

 - The above is an extract from the official swig site for more info please visit http://www.swig.org/

~~~~~~~~~~~~~~~
The Improvement
~~~~~~~~~~~~~~~

Once the SWIG Bindings for the various languages have been generated they are still fairly rough,
In order to make these more usable to those who program in these languages the API's are created.
These API's are created in the native language and are not converted via SWIG this means that they are 
easier and more user friendly than interacting with the SWIG bindings directly.

~~~~~~~~~~
The Update
~~~~~~~~~~

Updates to the SDK are carried out by modifying the C++ code then re-generating the bindings using swig.
Working asynchronously with C++ like this has many benefits one of which is the ability to add functionality to all
bindings without the need to add the change to each language's bindings manually.

-------------------
Basic Functionality
-------------------

There are some features of the SDK which **must** be used in order for the functionality of the SDK to work correctly.

~~~~~~~~
Sessions
~~~~~~~~

TODO:
Session Description and application

~~~~~~~~~
Listeners
~~~~~~~~~

TODO:
What and Why Listeners are needed
How to use Listeners

---------------------------
Creating a CRUD Application
---------------------------
These steps will help you use the basic Mega functionality, such as:
* Login
* Log out
* Create
* Read
* Upload
* Delete

~~~~~
Login
~~~~~

First to access the Mega services the user must have a valid account and login.
To do this you can use the Mega API login functionality.

.. code:: java

            // Log in
            megaApiJava.login(userEmail, password);
            
	

Of course this will require retrieving the user's user name and password and passing this to the function.
There are other ways of calling this function please check these in the JavaDocs.

Once logged in you will be able to do a number of basic features. Let's start with "Create".

~~~~~~
Create
~~~~~~

Below you will see the function for the creation of a node. This is the function used to create a File or "Node" in the Mega system.

.. code:: java

	//Create/Upload
        megaApiJava.startUpload("README.md", currentWorkingDirectory);

This example shows the upload of a file called README.md to the current directory the user is working in.    
Simply calls the startUpload() method and passes the file name string and the directory.
There are other ways of calling this function please check these in the JavaDocs.

next we have "Read"

~~~~
Read
~~~~

Being able to retrieve and read the files which you have uploaded is a very handy feature, This is provided by the below piece of code.

.. code:: java

        MegaNode fileToDownload = megaApiJava.getNodeByPath("README.md", currentWorkingDirectory);

Here we have saved the file as a MegaNode this is because the getNodeByPath returns a MegaNode. Again the name of the file and the directory are required.
There are other ways of calling this function please check these in the JavaDocs.

You may want to upload an existing file from you local directory to the Mega Cloud, To do this you will need to "Upload" it.

~~~~~~
Upload
~~~~~~
Below you will see an example of a readme.md file being uploaded.

.. code:: java

        MegaNode oldNode = megaApiJava.getNodeByPath("README.md", currentWorkingDirectory);
        megaApiJava.startUpload("README.md", currentWorkingDirectory, this);

        if (oldNode != null) {
            // Remove the old node with the same name.
            fileName = oldNode.getName();
            megaApiJava.remove(oldNode);

If there is an old node with the same name you may want to delete that node before uploading the new node.

Oops looks like you uploaded a file you didn't want to upload or you want to "Delete" a file. That's OK because that's our next section.

~~~~~~
Delete
~~~~~~

To remove a file from the Mega Cloud simply call the below method with the node you wish to remove.

.. code:: java

            megaApiJava.remove(node, this);



And that's it your now ready to start storing your info onto the Mega Cloud.
For more detailed information we have a brief how to on each of the functions, or if you want the specifics only you can check out the JavaDoc.
