/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_megaJNI = NULL;
    jmethodID director_methids[31];
  }
}

#include "megaapi.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "megaapi_wrap.h"

SwigDirector_MegaGfxProcessor::SwigDirector_MegaGfxProcessor(JNIEnv *jenv) : mega::MegaGfxProcessor(), Swig::Director(jenv) {
}

bool SwigDirector_MegaGfxProcessor::readBitmap(char const *path) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jpath = 0 ;
  
  if (!swig_override[0]) {
    return mega::MegaGfxProcessor::readBitmap(path);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpath = 0;
    if (path) {
      jpath = jenv->NewStringUTF((const char *)path);
      if (!jpath) return c_result;
    }
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_megaJNI, Swig::director_methids[0], swigjobj, jpath);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
    
    jenv->DeleteLocalRef(jpath); 
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_MegaGfxProcessor::getWidth() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return mega::MegaGfxProcessor::getWidth();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_megaJNI, Swig::director_methids[1], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_MegaGfxProcessor::getHeight() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return mega::MegaGfxProcessor::getHeight();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_megaJNI, Swig::director_methids[2], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_MegaGfxProcessor::getBitmapDataSize(int width, int height, int px, int py, int rw, int rh) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jwidth  ;
  jint jheight  ;
  jint jpx  ;
  jint jpy  ;
  jint jrw  ;
  jint jrh  ;
  
  if (!swig_override[3]) {
    return mega::MegaGfxProcessor::getBitmapDataSize(width,height,px,py,rw,rh);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jwidth = (jint) width;
    jheight = (jint) height;
    jpx = (jint) px;
    jpy = (jint) py;
    jrw = (jint) rw;
    jrh = (jint) rh;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_megaJNI, Swig::director_methids[3], swigjobj, jwidth, jheight, jpx, jpy, jrw, jrh);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_MegaGfxProcessor::getBitmapData(char *bitmapData, size_t size) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jbyteArray jbitmapData = 0 ;
  
  if (!swig_override[4]) {
    return mega::MegaGfxProcessor::getBitmapData(bitmapData,size);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbyteArray jb = (jenv)->NewByteArray(size);
    jbitmapData = jb;
    
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_megaJNI, Swig::director_methids[4], swigjobj, jbitmapData);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
    
    jenv->GetByteArrayRegion(jbitmapData, 0, size, (jbyte *)bitmapData);
    jenv->DeleteLocalRef(jbitmapData);
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_MegaGfxProcessor::freeBitmap() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    mega::MegaGfxProcessor::freeBitmap();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[5], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_MegaGfxProcessor::~SwigDirector_MegaGfxProcessor() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_MegaGfxProcessor::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "readBitmap", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "getWidth", "()I", NULL 
    },
    {
      "getHeight", "()I", NULL 
    },
    {
      "getBitmapDataSize", "(IIIIII)I", NULL 
    },
    {
      "getBitmapData", "([B)Z", NULL 
    },
    {
      "freeBitmap", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("nz/mega/sdk/MegaGfxProcessor");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_MegaLogger::SwigDirector_MegaLogger(JNIEnv *jenv) : mega::MegaLogger(), Swig::Director(jenv) {
}

void SwigDirector_MegaLogger::log(char const *time, int loglevel, char const *source, char const *message) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtime = 0 ;
  jint jloglevel  ;
  jstring jsource = 0 ;
  jstring jmessage = 0 ;
  
  if (!swig_override[0]) {
    mega::MegaLogger::log(time,loglevel,source,message);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtime = 0;
    if (time) {
      jtime = jenv->NewStringUTF((const char *)time);
      if (!jtime) return ;
    }
    jloglevel = (jint) loglevel;
    jsource = 0;
    if (source) {
      jsource = jenv->NewStringUTF((const char *)source);
      if (!jsource) return ;
    }
    jmessage = 0;
    if (message) {
      jmessage = jenv->NewStringUTF((const char *)message);
      if (!jmessage) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[6], swigjobj, jtime, jloglevel, jsource, jmessage);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
    
    jenv->DeleteLocalRef(jtime); 
    jenv->DeleteLocalRef(jsource);
    jenv->DeleteLocalRef(jmessage); 
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_MegaLogger::~SwigDirector_MegaLogger() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_MegaLogger::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "log", "(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("nz/mega/sdk/MegaLogger");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_MegaTreeProcessor::SwigDirector_MegaTreeProcessor(JNIEnv *jenv) : mega::MegaTreeProcessor(), Swig::Director(jenv) {
}

bool SwigDirector_MegaTreeProcessor::processMegaNode(mega::MegaNode *node) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jnode = 0 ;
  
  if (!swig_override[0]) {
    return mega::MegaTreeProcessor::processMegaNode(node);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaNode **)&jnode) = (mega::MegaNode *) node; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_megaJNI, Swig::director_methids[7], swigjobj, jnode);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_MegaTreeProcessor::~SwigDirector_MegaTreeProcessor() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_MegaTreeProcessor::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "processMegaNode", "(Lnz/mega/sdk/MegaNode;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("nz/mega/sdk/MegaTreeProcessor");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_MegaRequestListener::SwigDirector_MegaRequestListener(JNIEnv *jenv) : mega::MegaRequestListener(), Swig::Director(jenv) {
}

void SwigDirector_MegaRequestListener::onRequestStart(mega::MegaApi *api, mega::MegaRequest *request) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jrequest = 0 ;
  
  if (!swig_override[0]) {
    mega::MegaRequestListener::onRequestStart(api,request);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaRequest **)&jrequest) = (mega::MegaRequest *) request; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[8], swigjobj, japi, jrequest);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaRequestListener::onRequestFinish(mega::MegaApi *api, mega::MegaRequest *request, mega::MegaError *e) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jrequest = 0 ;
  jlong je = 0 ;
  
  if (!swig_override[1]) {
    mega::MegaRequestListener::onRequestFinish(api,request,e);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaRequest **)&jrequest) = (mega::MegaRequest *) request; 
    *((mega::MegaError **)&je) = (mega::MegaError *) e; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[9], swigjobj, japi, jrequest, je);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaRequestListener::onRequestUpdate(mega::MegaApi *api, mega::MegaRequest *request) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jrequest = 0 ;
  
  if (!swig_override[2]) {
    mega::MegaRequestListener::onRequestUpdate(api,request);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaRequest **)&jrequest) = (mega::MegaRequest *) request; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[10], swigjobj, japi, jrequest);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaRequestListener::onRequestTemporaryError(mega::MegaApi *api, mega::MegaRequest *request, mega::MegaError *error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jrequest = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[3]) {
    mega::MegaRequestListener::onRequestTemporaryError(api,request,error);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaRequest **)&jrequest) = (mega::MegaRequest *) request; 
    *((mega::MegaError **)&jerror) = (mega::MegaError *) error; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[11], swigjobj, japi, jrequest, jerror);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_MegaRequestListener::~SwigDirector_MegaRequestListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_MegaRequestListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onRequestStart", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaRequest;)V", NULL 
    },
    {
      "onRequestFinish", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaRequest;Lnz/mega/sdk/MegaError;)V", NULL 
    },
    {
      "onRequestUpdate", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaRequest;)V", NULL 
    },
    {
      "onRequestTemporaryError", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaRequest;Lnz/mega/sdk/MegaError;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("nz/mega/sdk/MegaRequestListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_MegaTransferListener::SwigDirector_MegaTransferListener(JNIEnv *jenv) : mega::MegaTransferListener(), Swig::Director(jenv) {
}

void SwigDirector_MegaTransferListener::onTransferStart(mega::MegaApi *api, mega::MegaTransfer *transfer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jtransfer = 0 ;
  
  if (!swig_override[0]) {
    mega::MegaTransferListener::onTransferStart(api,transfer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaTransfer **)&jtransfer) = (mega::MegaTransfer *) transfer; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[12], swigjobj, japi, jtransfer);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaTransferListener::onTransferFinish(mega::MegaApi *api, mega::MegaTransfer *transfer, mega::MegaError *error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jtransfer = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[1]) {
    mega::MegaTransferListener::onTransferFinish(api,transfer,error);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaTransfer **)&jtransfer) = (mega::MegaTransfer *) transfer; 
    *((mega::MegaError **)&jerror) = (mega::MegaError *) error; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[13], swigjobj, japi, jtransfer, jerror);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaTransferListener::onTransferUpdate(mega::MegaApi *api, mega::MegaTransfer *transfer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jtransfer = 0 ;
  
  if (!swig_override[2]) {
    mega::MegaTransferListener::onTransferUpdate(api,transfer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaTransfer **)&jtransfer) = (mega::MegaTransfer *) transfer; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[14], swigjobj, japi, jtransfer);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaTransferListener::onTransferTemporaryError(mega::MegaApi *api, mega::MegaTransfer *transfer, mega::MegaError *error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jtransfer = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[3]) {
    mega::MegaTransferListener::onTransferTemporaryError(api,transfer,error);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaTransfer **)&jtransfer) = (mega::MegaTransfer *) transfer; 
    *((mega::MegaError **)&jerror) = (mega::MegaError *) error; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[15], swigjobj, japi, jtransfer, jerror);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_MegaTransferListener::~SwigDirector_MegaTransferListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_MegaTransferListener::onTransferData(mega::MegaApi *api, mega::MegaTransfer *transfer, char *buffer, size_t size) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jtransfer = 0 ;
  jbyteArray jbuffer = 0 ;
  
  if (!swig_override[4]) {
    return mega::MegaTransferListener::onTransferData(api,transfer,buffer,size);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaTransfer **)&jtransfer) = (mega::MegaTransfer *) transfer; 
    {
      jbyteArray jb = (jenv)->NewByteArray(size);
      (jenv)->SetByteArrayRegion(jb, 0, size, (jbyte *)buffer);
      jbuffer = jb;
    }
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_megaJNI, Swig::director_methids[16], swigjobj, japi, jtransfer, jbuffer);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
    jenv->DeleteLocalRef(jbuffer); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_MegaTransferListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onTransferStart", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaTransfer;)V", NULL 
    },
    {
      "onTransferFinish", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaTransfer;Lnz/mega/sdk/MegaError;)V", NULL 
    },
    {
      "onTransferUpdate", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaTransfer;)V", NULL 
    },
    {
      "onTransferTemporaryError", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaTransfer;Lnz/mega/sdk/MegaError;)V", NULL 
    },
    {
      "onTransferData", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaTransfer;[B)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("nz/mega/sdk/MegaTransferListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_MegaGlobalListener::SwigDirector_MegaGlobalListener(JNIEnv *jenv) : mega::MegaGlobalListener(), Swig::Director(jenv) {
}

void SwigDirector_MegaGlobalListener::onUsersUpdate(mega::MegaApi *api, mega::MegaUserList *users) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jusers = 0 ;
  
  if (!swig_override[0]) {
    mega::MegaGlobalListener::onUsersUpdate(api,users);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaUserList **)&jusers) = (mega::MegaUserList *) users; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[17], swigjobj, japi, jusers);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaGlobalListener::onNodesUpdate(mega::MegaApi *api, mega::MegaNodeList *nodes) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jnodes = 0 ;
  
  if (!swig_override[1]) {
    mega::MegaGlobalListener::onNodesUpdate(api,nodes);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaNodeList **)&jnodes) = (mega::MegaNodeList *) nodes; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[18], swigjobj, japi, jnodes);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaGlobalListener::onReloadNeeded(mega::MegaApi *api) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  
  if (!swig_override[2]) {
    mega::MegaGlobalListener::onReloadNeeded(api);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[19], swigjobj, japi);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_MegaGlobalListener::~SwigDirector_MegaGlobalListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_MegaGlobalListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onUsersUpdate", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaUserList;)V", NULL 
    },
    {
      "onNodesUpdate", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaNodeList;)V", NULL 
    },
    {
      "onReloadNeeded", "(Lnz/mega/sdk/MegaApi;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("nz/mega/sdk/MegaGlobalListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_MegaListener::SwigDirector_MegaListener(JNIEnv *jenv) : mega::MegaListener(), Swig::Director(jenv) {
}

void SwigDirector_MegaListener::onRequestStart(mega::MegaApi *api, mega::MegaRequest *request) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jrequest = 0 ;
  
  if (!swig_override[0]) {
    mega::MegaListener::onRequestStart(api,request);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaRequest **)&jrequest) = (mega::MegaRequest *) request; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[20], swigjobj, japi, jrequest);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaListener::onRequestFinish(mega::MegaApi *api, mega::MegaRequest *request, mega::MegaError *e) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jrequest = 0 ;
  jlong je = 0 ;
  
  if (!swig_override[1]) {
    mega::MegaListener::onRequestFinish(api,request,e);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaRequest **)&jrequest) = (mega::MegaRequest *) request; 
    *((mega::MegaError **)&je) = (mega::MegaError *) e; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[21], swigjobj, japi, jrequest, je);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaListener::onRequestUpdate(mega::MegaApi *api, mega::MegaRequest *request) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jrequest = 0 ;
  
  if (!swig_override[2]) {
    mega::MegaListener::onRequestUpdate(api,request);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaRequest **)&jrequest) = (mega::MegaRequest *) request; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[22], swigjobj, japi, jrequest);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaListener::onRequestTemporaryError(mega::MegaApi *api, mega::MegaRequest *request, mega::MegaError *error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jrequest = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[3]) {
    mega::MegaListener::onRequestTemporaryError(api,request,error);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaRequest **)&jrequest) = (mega::MegaRequest *) request; 
    *((mega::MegaError **)&jerror) = (mega::MegaError *) error; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[23], swigjobj, japi, jrequest, jerror);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaListener::onTransferStart(mega::MegaApi *api, mega::MegaTransfer *transfer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jtransfer = 0 ;
  
  if (!swig_override[4]) {
    mega::MegaListener::onTransferStart(api,transfer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaTransfer **)&jtransfer) = (mega::MegaTransfer *) transfer; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[24], swigjobj, japi, jtransfer);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaListener::onTransferFinish(mega::MegaApi *api, mega::MegaTransfer *transfer, mega::MegaError *error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jtransfer = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[5]) {
    mega::MegaListener::onTransferFinish(api,transfer,error);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaTransfer **)&jtransfer) = (mega::MegaTransfer *) transfer; 
    *((mega::MegaError **)&jerror) = (mega::MegaError *) error; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[25], swigjobj, japi, jtransfer, jerror);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaListener::onTransferUpdate(mega::MegaApi *api, mega::MegaTransfer *transfer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jtransfer = 0 ;
  
  if (!swig_override[6]) {
    mega::MegaListener::onTransferUpdate(api,transfer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaTransfer **)&jtransfer) = (mega::MegaTransfer *) transfer; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[26], swigjobj, japi, jtransfer);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaListener::onTransferTemporaryError(mega::MegaApi *api, mega::MegaTransfer *transfer, mega::MegaError *error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jtransfer = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[7]) {
    mega::MegaListener::onTransferTemporaryError(api,transfer,error);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaTransfer **)&jtransfer) = (mega::MegaTransfer *) transfer; 
    *((mega::MegaError **)&jerror) = (mega::MegaError *) error; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[27], swigjobj, japi, jtransfer, jerror);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaListener::onUsersUpdate(mega::MegaApi *api, mega::MegaUserList *users) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jusers = 0 ;
  
  if (!swig_override[8]) {
    mega::MegaListener::onUsersUpdate(api,users);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaUserList **)&jusers) = (mega::MegaUserList *) users; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[28], swigjobj, japi, jusers);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaListener::onNodesUpdate(mega::MegaApi *api, mega::MegaNodeList *nodes) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  jlong jnodes = 0 ;
  
  if (!swig_override[9]) {
    mega::MegaListener::onNodesUpdate(api,nodes);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    *((mega::MegaNodeList **)&jnodes) = (mega::MegaNodeList *) nodes; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[29], swigjobj, japi, jnodes);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MegaListener::onReloadNeeded(mega::MegaApi *api) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong japi = 0 ;
  
  if (!swig_override[10]) {
    mega::MegaListener::onReloadNeeded(api);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((mega::MegaApi **)&japi) = (mega::MegaApi *) api; 
    jenv->CallStaticVoidMethod(Swig::jclass_megaJNI, Swig::director_methids[30], swigjobj, japi);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_MegaListener::~SwigDirector_MegaListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_MegaListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onRequestStart", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaRequest;)V", NULL 
    },
    {
      "onRequestFinish", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaRequest;Lnz/mega/sdk/MegaError;)V", NULL 
    },
    {
      "onRequestUpdate", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaRequest;)V", NULL 
    },
    {
      "onRequestTemporaryError", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaRequest;Lnz/mega/sdk/MegaError;)V", NULL 
    },
    {
      "onTransferStart", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaTransfer;)V", NULL 
    },
    {
      "onTransferFinish", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaTransfer;Lnz/mega/sdk/MegaError;)V", NULL 
    },
    {
      "onTransferUpdate", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaTransfer;)V", NULL 
    },
    {
      "onTransferTemporaryError", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaTransfer;Lnz/mega/sdk/MegaError;)V", NULL 
    },
    {
      "onUsersUpdate", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaUserList;)V", NULL 
    },
    {
      "onNodesUpdate", "(Lnz/mega/sdk/MegaApi;Lnz/mega/sdk/MegaNodeList;)V", NULL 
    },
    {
      "onReloadNeeded", "(Lnz/mega/sdk/MegaApi;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("nz/mega/sdk/MegaListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 11; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MEGA_1DEBRIS_1FOLDER_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)mega::MEGA_DEBRIS_FOLDER;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_INVALID_1HANDLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaHandle result;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaHandle)(mega::MegaHandle)mega::INVALID_HANDLE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1readBitmap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readBitmap((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1readBitmapSwigExplicitMegaGfxProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->mega::MegaGfxProcessor::readBitmap((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  result = (int)(arg1)->getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1getWidthSwigExplicitMegaGfxProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  result = (int)(arg1)->mega::MegaGfxProcessor::getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  result = (int)(arg1)->getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1getHeightSwigExplicitMegaGfxProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  result = (int)(arg1)->mega::MegaGfxProcessor::getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1getBitmapDataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jint jresult = 0 ;
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (int)(arg1)->getBitmapDataSize(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1getBitmapDataSizeSwigExplicitMegaGfxProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jint jresult = 0 ;
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (int)(arg1)->mega::MegaGfxProcessor::getBitmapDataSize(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1getBitmapData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jboolean jresult = 0 ;
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = (bool)(arg1)->getBitmapData(arg2,arg3);
  jresult = (jboolean)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1getBitmapDataSwigExplicitMegaGfxProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jboolean jresult = 0 ;
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = (bool)(arg1)->mega::MegaGfxProcessor::getBitmapData(arg2,arg3);
  jresult = (jboolean)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1freeBitmap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  (arg1)->freeBitmap();
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1freeBitmapSwigExplicitMegaGfxProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  (arg1)->mega::MegaGfxProcessor::freeBitmap();
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaGfxProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaGfxProcessor *arg1 = (mega::MegaGfxProcessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaGfxProcessor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaGfxProcessor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaGfxProcessor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaGfxProcessor *)new SwigDirector_MegaGfxProcessor(jenv);
  *(mega::MegaGfxProcessor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mega::MegaGfxProcessor *obj = *((mega::MegaGfxProcessor **)&objarg);
  (void)jcls;
  SwigDirector_MegaGfxProcessor *director = dynamic_cast<SwigDirector_MegaGfxProcessor *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGfxProcessor_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mega::MegaGfxProcessor *obj = *((mega::MegaGfxProcessor **)&objarg);
  SwigDirector_MegaGfxProcessor *director = dynamic_cast<SwigDirector_MegaGfxProcessor *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaProxy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaProxy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaProxy *)new mega::MegaProxy();
  *(mega::MegaProxy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaProxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaProxy *arg1 = (mega::MegaProxy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaProxy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaProxy_1setProxyType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mega::MegaProxy *arg1 = (mega::MegaProxy *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaProxy **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setProxyType(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaProxy_1setProxyURL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaProxy *arg1 = (mega::MegaProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaProxy **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setProxyURL((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaProxy_1setCredentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  mega::MegaProxy *arg1 = (mega::MegaProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaProxy **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setCredentials((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaProxy_1getProxyType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaProxy *arg1 = (mega::MegaProxy *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaProxy **)&jarg1; 
  result = (int)(arg1)->getProxyType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaProxy_1getProxyURL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaProxy *arg1 = (mega::MegaProxy *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaProxy **)&jarg1; 
  result = (char *)(arg1)->getProxyURL();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaProxy_1credentialsNeeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaProxy *arg1 = (mega::MegaProxy *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaProxy **)&jarg1; 
  result = (bool)(arg1)->credentialsNeeded();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaProxy_1getUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaProxy *arg1 = (mega::MegaProxy *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaProxy **)&jarg1; 
  result = (char *)(arg1)->getUsername();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaProxy_1getPassword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaProxy *arg1 = (mega::MegaProxy *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaProxy **)&jarg1; 
  result = (char *)(arg1)->getPassword();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaLogger_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  mega::MegaLogger *arg1 = (mega::MegaLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaLogger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->log((char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaLogger_1logSwigExplicitMegaLogger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  mega::MegaLogger *arg1 = (mega::MegaLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaLogger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->mega::MegaLogger::log((char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaLogger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaLogger *arg1 = (mega::MegaLogger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaLogger **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaLogger(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaLogger *)new SwigDirector_MegaLogger(jenv);
  *(mega::MegaLogger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaLogger_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mega::MegaLogger *obj = *((mega::MegaLogger **)&objarg);
  (void)jcls;
  SwigDirector_MegaLogger *director = dynamic_cast<SwigDirector_MegaLogger *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaLogger_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mega::MegaLogger *obj = *((mega::MegaLogger **)&objarg);
  SwigDirector_MegaLogger *director = dynamic_cast<SwigDirector_MegaLogger *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (mega::MegaNode *)(arg1)->copy();
  *(mega::MegaNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (int)(arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (char *)(arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1getBase64Handle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (char *)(arg1)->getBase64Handle();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  delete [] result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (int64_t)(arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1getCreationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (int64_t)(arg1)->getCreationTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1getModificationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (int64_t)(arg1)->getModificationTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  mega::MegaHandle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (mega::MegaHandle)(arg1)->getHandle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1getBase64Key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (char *)(arg1)->getBase64Key();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1getTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (int)(arg1)->getTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1isFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (bool)(arg1)->isFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1isFolder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (bool)(arg1)->isFolder();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1isRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (bool)(arg1)->isRemoved();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1hasChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->hasChanged(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1getChanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (int)(arg1)->getChanges();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1hasThumbnail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (bool)(arg1)->hasThumbnail();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1hasPreview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (bool)(arg1)->hasPreview();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaNode_1isPublic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaNode *arg1 = (mega::MegaNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNode **)&jarg1; 
  result = (bool)(arg1)->isPublic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaNode *)new mega::MegaNode();
  *(mega::MegaNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaUser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaUser *arg1 = (mega::MegaUser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaUser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaUser_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaUser *arg1 = (mega::MegaUser *) 0 ;
  mega::MegaUser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaUser **)&jarg1; 
  result = (mega::MegaUser *)(arg1)->copy();
  *(mega::MegaUser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaUser_1getEmail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaUser *arg1 = (mega::MegaUser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaUser **)&jarg1; 
  result = (char *)(arg1)->getEmail();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaUser_1getVisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaUser *arg1 = (mega::MegaUser *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaUser **)&jarg1; 
  result = (int)(arg1)->getVisibility();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaUser_1getTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaUser *arg1 = (mega::MegaUser *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaUser **)&jarg1; 
  result = (time_t)(arg1)->getTimestamp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaUser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaUser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaUser *)new mega::MegaUser();
  *(mega::MegaUser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaShare(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaShare *arg1 = (mega::MegaShare *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaShare **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaShare_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaShare *arg1 = (mega::MegaShare *) 0 ;
  mega::MegaShare *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaShare **)&jarg1; 
  result = (mega::MegaShare *)(arg1)->copy();
  *(mega::MegaShare **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaShare_1getUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaShare *arg1 = (mega::MegaShare *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaShare **)&jarg1; 
  result = (char *)(arg1)->getUser();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaShare_1getNodeHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaShare *arg1 = (mega::MegaShare *) 0 ;
  mega::MegaHandle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaShare **)&jarg1; 
  result = (mega::MegaHandle)(arg1)->getNodeHandle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaShare_1getAccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaShare *arg1 = (mega::MegaShare *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaShare **)&jarg1; 
  result = (int)(arg1)->getAccess();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaShare_1getTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaShare *arg1 = (mega::MegaShare *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaShare **)&jarg1; 
  result = (int64_t)(arg1)->getTimestamp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaShare(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaShare *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaShare *)new mega::MegaShare();
  *(mega::MegaShare **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaNodeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaNodeList *arg1 = (mega::MegaNodeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaNodeList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaNodeList_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaNodeList *arg1 = (mega::MegaNodeList *) 0 ;
  mega::MegaNodeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNodeList **)&jarg1; 
  result = (mega::MegaNodeList *)(arg1)->copy();
  *(mega::MegaNodeList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaNodeList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mega::MegaNodeList *arg1 = (mega::MegaNodeList *) 0 ;
  int arg2 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNodeList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mega::MegaNode *)(arg1)->get(arg2);
  *(mega::MegaNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaNodeList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaNodeList *arg1 = (mega::MegaNodeList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaNodeList **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaNodeList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaNodeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaNodeList *)new mega::MegaNodeList();
  *(mega::MegaNodeList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaUserList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaUserList *arg1 = (mega::MegaUserList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaUserList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaUserList_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaUserList *arg1 = (mega::MegaUserList *) 0 ;
  mega::MegaUserList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaUserList **)&jarg1; 
  result = (mega::MegaUserList *)(arg1)->copy();
  *(mega::MegaUserList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaUserList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mega::MegaUserList *arg1 = (mega::MegaUserList *) 0 ;
  int arg2 ;
  mega::MegaUser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaUserList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mega::MegaUser *)(arg1)->get(arg2);
  *(mega::MegaUser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaUserList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaUserList *arg1 = (mega::MegaUserList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaUserList **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaUserList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaUserList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaUserList *)new mega::MegaUserList();
  *(mega::MegaUserList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaShareList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaShareList *arg1 = (mega::MegaShareList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaShareList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaShareList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mega::MegaShareList *arg1 = (mega::MegaShareList *) 0 ;
  int arg2 ;
  mega::MegaShare *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaShareList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mega::MegaShare *)(arg1)->get(arg2);
  *(mega::MegaShare **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaShareList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaShareList *arg1 = (mega::MegaShareList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaShareList **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaShareList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaShareList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaShareList *)new mega::MegaShareList();
  *(mega::MegaShareList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaTransferList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaTransferList *arg1 = (mega::MegaTransferList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaTransferList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mega::MegaTransferList *arg1 = (mega::MegaTransferList *) 0 ;
  int arg2 ;
  mega::MegaTransfer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransferList **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mega::MegaTransfer *)(arg1)->get(arg2);
  *(mega::MegaTransfer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaTransferList *arg1 = (mega::MegaTransferList *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransferList **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaTransferList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaTransferList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaTransferList *)new mega::MegaTransferList();
  *(mega::MegaTransferList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  mega::MegaRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (mega::MegaRequest *)(arg1)->copy();
  *(mega::MegaRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (int)((mega::MegaRequest const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getRequestString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->getRequestString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->toString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->__str__();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1_1_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->__toString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getNodeHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  mega::MegaHandle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (mega::MegaHandle)((mega::MegaRequest const *)arg1)->getNodeHandle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->getLink();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getParentHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  mega::MegaHandle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (mega::MegaHandle)((mega::MegaRequest const *)arg1)->getParentHandle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getSessionKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->getSessionKey();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getEmail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->getEmail();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getPassword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->getPassword();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getNewPassword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->getNewPassword();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getPrivateKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->getPrivateKey();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getAccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (int)((mega::MegaRequest const *)arg1)->getAccess();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->getFile();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getNumRetry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (int)((mega::MegaRequest const *)arg1)->getNumRetry();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getPublicNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (mega::MegaNode *)((mega::MegaRequest const *)arg1)->getPublicNode();
  *(mega::MegaNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getPublicMegaNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (mega::MegaNode *)((mega::MegaRequest const *)arg1)->getPublicMegaNode();
  *(mega::MegaNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getParamType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (int)((mega::MegaRequest const *)arg1)->getParamType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (char *)((mega::MegaRequest const *)arg1)->getText();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (long long)((mega::MegaRequest const *)arg1)->getNumber();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (bool)((mega::MegaRequest const *)arg1)->getFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getTransferredBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (long long)((mega::MegaRequest const *)arg1)->getTransferredBytes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getTotalBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (long long)((mega::MegaRequest const *)arg1)->getTotalBytes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getMegaAccountDetails(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  mega::MegaAccountDetails *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (mega::MegaAccountDetails *)((mega::MegaRequest const *)arg1)->getMegaAccountDetails();
  *(mega::MegaAccountDetails **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getPricing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  mega::MegaPricing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (mega::MegaPricing *)((mega::MegaRequest const *)arg1)->getPricing();
  *(mega::MegaPricing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getTransferTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (int)((mega::MegaRequest const *)arg1)->getTransferTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaRequest_1getNumDetails(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaRequest *arg1 = (mega::MegaRequest *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaRequest **)&jarg1; 
  result = (int)((mega::MegaRequest const *)arg1)->getNumDetails();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaRequest *)new mega::MegaRequest();
  *(mega::MegaRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaTransfer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  mega::MegaTransfer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (mega::MegaTransfer *)(arg1)->copy();
  *(mega::MegaTransfer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (int)((mega::MegaTransfer const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getTransferString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (char *)((mega::MegaTransfer const *)arg1)->getTransferString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (char *)((mega::MegaTransfer const *)arg1)->toString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (char *)((mega::MegaTransfer const *)arg1)->__str__();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1_1_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (char *)((mega::MegaTransfer const *)arg1)->__toString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (int64_t)((mega::MegaTransfer const *)arg1)->getStartTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getTransferredBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (long long)((mega::MegaTransfer const *)arg1)->getTransferredBytes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getTotalBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (long long)((mega::MegaTransfer const *)arg1)->getTotalBytes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (char *)((mega::MegaTransfer const *)arg1)->getPath();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getParentPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (char *)((mega::MegaTransfer const *)arg1)->getParentPath();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getNodeHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  mega::MegaHandle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (mega::MegaHandle)((mega::MegaTransfer const *)arg1)->getNodeHandle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getParentHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  mega::MegaHandle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (mega::MegaHandle)((mega::MegaTransfer const *)arg1)->getParentHandle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getStartPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (long long)((mega::MegaTransfer const *)arg1)->getStartPos();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getEndPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (long long)((mega::MegaTransfer const *)arg1)->getEndPos();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (char *)((mega::MegaTransfer const *)arg1)->getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getNumRetry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (int)((mega::MegaTransfer const *)arg1)->getNumRetry();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getMaxRetries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (int)((mega::MegaTransfer const *)arg1)->getMaxRetries();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (int)((mega::MegaTransfer const *)arg1)->getTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (long long)((mega::MegaTransfer const *)arg1)->getSpeed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getDeltaSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (long long)((mega::MegaTransfer const *)arg1)->getDeltaSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getUpdateTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (int64_t)((mega::MegaTransfer const *)arg1)->getUpdateTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getPublicMegaNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (mega::MegaNode *)((mega::MegaTransfer const *)arg1)->getPublicMegaNode();
  *(mega::MegaNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1isSyncTransfer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (bool)((mega::MegaTransfer const *)arg1)->isSyncTransfer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1isStreamingTransfer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (bool)((mega::MegaTransfer const *)arg1)->isStreamingTransfer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaTransfer_1getLastBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaTransfer *arg1 = (mega::MegaTransfer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaTransfer **)&jarg1; 
  result = (char *)((mega::MegaTransfer const *)arg1)->getLastBytes();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaTransfer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaTransfer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaTransfer *)new mega::MegaTransfer();
  *(mega::MegaTransfer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaError_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  mega::MegaError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (mega::MegaError *)new mega::MegaError(arg1);
  *(mega::MegaError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaError_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaError *arg1 = 0 ;
  mega::MegaError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaError **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mega::MegaError const & reference is null");
    return 0;
  } 
  result = (mega::MegaError *)new mega::MegaError((mega::MegaError const &)*arg1);
  *(mega::MegaError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaError *arg1 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaError **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaError_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaError *arg1 = (mega::MegaError *) 0 ;
  mega::MegaError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaError **)&jarg1; 
  result = (mega::MegaError *)(arg1)->copy();
  *(mega::MegaError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaError_1getErrorCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaError *arg1 = (mega::MegaError *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaError **)&jarg1; 
  result = (int)((mega::MegaError const *)arg1)->getErrorCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaError_1getErrorString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaError *arg1 = (mega::MegaError *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaError **)&jarg1; 
  result = (char *)((mega::MegaError const *)arg1)->getErrorString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaError_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaError *arg1 = (mega::MegaError *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaError **)&jarg1; 
  result = (char *)((mega::MegaError const *)arg1)->toString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaError_1_1_1str_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaError *arg1 = (mega::MegaError *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaError **)&jarg1; 
  result = (char *)((mega::MegaError const *)arg1)->__str__();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaError_1_1_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaError *arg1 = (mega::MegaError *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaError **)&jarg1; 
  result = (char *)((mega::MegaError const *)arg1)->__toString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaError_1getErrorString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)mega::MegaError::getErrorString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaTreeProcessor_1processMegaNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mega::MegaTreeProcessor *arg1 = (mega::MegaTreeProcessor *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaTreeProcessor **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (bool)(arg1)->processMegaNode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaTreeProcessor_1processMegaNodeSwigExplicitMegaTreeProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mega::MegaTreeProcessor *arg1 = (mega::MegaTreeProcessor *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaTreeProcessor **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (bool)(arg1)->mega::MegaTreeProcessor::processMegaNode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaTreeProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaTreeProcessor *arg1 = (mega::MegaTreeProcessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaTreeProcessor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaTreeProcessor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaTreeProcessor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaTreeProcessor *)new SwigDirector_MegaTreeProcessor(jenv);
  *(mega::MegaTreeProcessor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTreeProcessor_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mega::MegaTreeProcessor *obj = *((mega::MegaTreeProcessor **)&objarg);
  (void)jcls;
  SwigDirector_MegaTreeProcessor *director = dynamic_cast<SwigDirector_MegaTreeProcessor *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTreeProcessor_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mega::MegaTreeProcessor *obj = *((mega::MegaTreeProcessor **)&objarg);
  SwigDirector_MegaTreeProcessor *director = dynamic_cast<SwigDirector_MegaTreeProcessor *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaRequestListener_1onRequestStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaRequestListener *arg1 = (mega::MegaRequestListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaRequestListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  (arg1)->onRequestStart(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaRequestListener_1onRequestStartSwigExplicitMegaRequestListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaRequestListener *arg1 = (mega::MegaRequestListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaRequestListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  (arg1)->mega::MegaRequestListener::onRequestStart(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaRequestListener_1onRequestFinish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaRequestListener *arg1 = (mega::MegaRequestListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaRequestListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->onRequestFinish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaRequestListener_1onRequestFinishSwigExplicitMegaRequestListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaRequestListener *arg1 = (mega::MegaRequestListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaRequestListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->mega::MegaRequestListener::onRequestFinish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaRequestListener_1onRequestUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaRequestListener *arg1 = (mega::MegaRequestListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaRequestListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  (arg1)->onRequestUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaRequestListener_1onRequestUpdateSwigExplicitMegaRequestListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaRequestListener *arg1 = (mega::MegaRequestListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaRequestListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  (arg1)->mega::MegaRequestListener::onRequestUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaRequestListener_1onRequestTemporaryError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaRequestListener *arg1 = (mega::MegaRequestListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaRequestListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->onRequestTemporaryError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaRequestListener_1onRequestTemporaryErrorSwigExplicitMegaRequestListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaRequestListener *arg1 = (mega::MegaRequestListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaRequestListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->mega::MegaRequestListener::onRequestTemporaryError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaRequestListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaRequestListener *arg1 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaRequestListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaRequestListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaRequestListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaRequestListener *)new SwigDirector_MegaRequestListener(jenv);
  *(mega::MegaRequestListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaRequestListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mega::MegaRequestListener *obj = *((mega::MegaRequestListener **)&objarg);
  (void)jcls;
  SwigDirector_MegaRequestListener *director = dynamic_cast<SwigDirector_MegaRequestListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaRequestListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mega::MegaRequestListener *obj = *((mega::MegaRequestListener **)&objarg);
  SwigDirector_MegaRequestListener *director = dynamic_cast<SwigDirector_MegaRequestListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1onTransferStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaTransferListener *arg1 = (mega::MegaTransferListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaTransferListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  (arg1)->onTransferStart(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1onTransferStartSwigExplicitMegaTransferListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaTransferListener *arg1 = (mega::MegaTransferListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaTransferListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  (arg1)->mega::MegaTransferListener::onTransferStart(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1onTransferFinish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaTransferListener *arg1 = (mega::MegaTransferListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaTransferListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->onTransferFinish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1onTransferFinishSwigExplicitMegaTransferListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaTransferListener *arg1 = (mega::MegaTransferListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaTransferListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->mega::MegaTransferListener::onTransferFinish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1onTransferUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaTransferListener *arg1 = (mega::MegaTransferListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaTransferListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  (arg1)->onTransferUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1onTransferUpdateSwigExplicitMegaTransferListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaTransferListener *arg1 = (mega::MegaTransferListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaTransferListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  (arg1)->mega::MegaTransferListener::onTransferUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1onTransferTemporaryError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaTransferListener *arg1 = (mega::MegaTransferListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaTransferListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->onTransferTemporaryError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1onTransferTemporaryErrorSwigExplicitMegaTransferListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaTransferListener *arg1 = (mega::MegaTransferListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaTransferListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->mega::MegaTransferListener::onTransferTemporaryError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaTransferListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaTransferListener *arg1 = (mega::MegaTransferListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaTransferListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1onTransferData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  mega::MegaTransferListener *arg1 = (mega::MegaTransferListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaTransferListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  {
    if (jarg4) {
      arg4 = (char *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  result = (bool)(arg1)->onTransferData(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, 0);
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1onTransferDataSwigExplicitMegaTransferListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  mega::MegaTransferListener *arg1 = (mega::MegaTransferListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaTransferListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  {
    if (jarg4) {
      arg4 = (char *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  result = (bool)(arg1)->mega::MegaTransferListener::onTransferData(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaTransferListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaTransferListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaTransferListener *)new SwigDirector_MegaTransferListener(jenv);
  *(mega::MegaTransferListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mega::MegaTransferListener *obj = *((mega::MegaTransferListener **)&objarg);
  (void)jcls;
  SwigDirector_MegaTransferListener *director = dynamic_cast<SwigDirector_MegaTransferListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaTransferListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mega::MegaTransferListener *obj = *((mega::MegaTransferListener **)&objarg);
  SwigDirector_MegaTransferListener *director = dynamic_cast<SwigDirector_MegaTransferListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGlobalListener_1onUsersUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaGlobalListener *arg1 = (mega::MegaGlobalListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaUserList *arg3 = (mega::MegaUserList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaGlobalListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaUserList **)&jarg3; 
  (arg1)->onUsersUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGlobalListener_1onUsersUpdateSwigExplicitMegaGlobalListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaGlobalListener *arg1 = (mega::MegaGlobalListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaUserList *arg3 = (mega::MegaUserList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaGlobalListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaUserList **)&jarg3; 
  (arg1)->mega::MegaGlobalListener::onUsersUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGlobalListener_1onNodesUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaGlobalListener *arg1 = (mega::MegaGlobalListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaNodeList *arg3 = (mega::MegaNodeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaGlobalListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaNodeList **)&jarg3; 
  (arg1)->onNodesUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGlobalListener_1onNodesUpdateSwigExplicitMegaGlobalListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaGlobalListener *arg1 = (mega::MegaGlobalListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaNodeList *arg3 = (mega::MegaNodeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaGlobalListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaNodeList **)&jarg3; 
  (arg1)->mega::MegaGlobalListener::onNodesUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGlobalListener_1onReloadNeeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaGlobalListener *arg1 = (mega::MegaGlobalListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaGlobalListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  (arg1)->onReloadNeeded(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGlobalListener_1onReloadNeededSwigExplicitMegaGlobalListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaGlobalListener *arg1 = (mega::MegaGlobalListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaGlobalListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  (arg1)->mega::MegaGlobalListener::onReloadNeeded(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaGlobalListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaGlobalListener *arg1 = (mega::MegaGlobalListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaGlobalListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaGlobalListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaGlobalListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaGlobalListener *)new SwigDirector_MegaGlobalListener(jenv);
  *(mega::MegaGlobalListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGlobalListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mega::MegaGlobalListener *obj = *((mega::MegaGlobalListener **)&objarg);
  (void)jcls;
  SwigDirector_MegaGlobalListener *director = dynamic_cast<SwigDirector_MegaGlobalListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaGlobalListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mega::MegaGlobalListener *obj = *((mega::MegaGlobalListener **)&objarg);
  SwigDirector_MegaGlobalListener *director = dynamic_cast<SwigDirector_MegaGlobalListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onRequestStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  (arg1)->onRequestStart(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onRequestStartSwigExplicitMegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  (arg1)->mega::MegaListener::onRequestStart(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onRequestFinish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->onRequestFinish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onRequestFinishSwigExplicitMegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->mega::MegaListener::onRequestFinish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onRequestUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  (arg1)->onRequestUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onRequestUpdateSwigExplicitMegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  (arg1)->mega::MegaListener::onRequestUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onRequestTemporaryError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->onRequestTemporaryError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onRequestTemporaryErrorSwigExplicitMegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *arg3 = (mega::MegaRequest *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaRequest **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->mega::MegaListener::onRequestTemporaryError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onTransferStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  (arg1)->onTransferStart(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onTransferStartSwigExplicitMegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  (arg1)->mega::MegaListener::onTransferStart(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onTransferFinish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->onTransferFinish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onTransferFinishSwigExplicitMegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->mega::MegaListener::onTransferFinish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onTransferUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  (arg1)->onTransferUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onTransferUpdateSwigExplicitMegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  (arg1)->mega::MegaListener::onTransferUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onTransferTemporaryError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->onTransferTemporaryError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onTransferTemporaryErrorSwigExplicitMegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg3 = (mega::MegaTransfer *) 0 ;
  mega::MegaError *arg4 = (mega::MegaError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaTransfer **)&jarg3; 
  arg4 = *(mega::MegaError **)&jarg4; 
  (arg1)->mega::MegaListener::onTransferTemporaryError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onUsersUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaUserList *arg3 = (mega::MegaUserList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaUserList **)&jarg3; 
  (arg1)->onUsersUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onUsersUpdateSwigExplicitMegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaUserList *arg3 = (mega::MegaUserList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaUserList **)&jarg3; 
  (arg1)->mega::MegaListener::onUsersUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onNodesUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaNodeList *arg3 = (mega::MegaNodeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaNodeList **)&jarg3; 
  (arg1)->onNodesUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onNodesUpdateSwigExplicitMegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  mega::MegaNodeList *arg3 = (mega::MegaNodeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  arg3 = *(mega::MegaNodeList **)&jarg3; 
  (arg1)->mega::MegaListener::onNodesUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onReloadNeeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  (arg1)->onReloadNeeded(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1onReloadNeededSwigExplicitMegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  mega::MegaApi *arg2 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaListener **)&jarg1; 
  arg2 = *(mega::MegaApi **)&jarg2; 
  (arg1)->mega::MegaListener::onReloadNeeded(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaListener *arg1 = (mega::MegaListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaListener *)new SwigDirector_MegaListener(jenv);
  *(mega::MegaListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mega::MegaListener *obj = *((mega::MegaListener **)&objarg);
  (void)jcls;
  SwigDirector_MegaListener *director = dynamic_cast<SwigDirector_MegaListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mega::MegaListener *obj = *((mega::MegaListener **)&objarg);
  SwigDirector_MegaListener *director = dynamic_cast<SwigDirector_MegaListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaApi_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (mega::MegaApi *)new mega::MegaApi((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(mega::MegaApi **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaApi_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (mega::MegaApi *)new mega::MegaApi((char const *)arg1,(char const *)arg2);
  *(mega::MegaApi **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaApi_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  mega::MegaApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (mega::MegaApi *)new mega::MegaApi((char const *)arg1);
  *(mega::MegaApi **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaApi_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  mega::MegaGfxProcessor *arg2 = (mega::MegaGfxProcessor *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mega::MegaApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(mega::MegaGfxProcessor **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (mega::MegaApi *)new mega::MegaApi((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4);
  *(mega::MegaApi **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaApi_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  mega::MegaGfxProcessor *arg2 = (mega::MegaGfxProcessor *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(mega::MegaGfxProcessor **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (mega::MegaApi *)new mega::MegaApi((char const *)arg1,arg2,(char const *)arg3);
  *(mega::MegaApi **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaApi_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  mega::MegaGfxProcessor *arg2 = (mega::MegaGfxProcessor *) 0 ;
  mega::MegaApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(mega::MegaGfxProcessor **)&jarg2; 
  result = (mega::MegaApi *)new mega::MegaApi((char const *)arg1,arg2);
  *(mega::MegaApi **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaApi(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaApi **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaListener *arg2 = (mega::MegaListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaListener **)&jarg2; 
  (arg1)->addListener(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1addRequestListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaRequestListener *arg2 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaRequestListener **)&jarg2; 
  (arg1)->addRequestListener(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1addTransferListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaTransferListener *arg2 = (mega::MegaTransferListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaTransferListener **)&jarg2; 
  (arg1)->addTransferListener(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1addGlobalListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaGlobalListener *arg2 = (mega::MegaGlobalListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaGlobalListener **)&jarg2; 
  (arg1)->addGlobalListener(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaListener *arg2 = (mega::MegaListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaListener **)&jarg2; 
  (arg1)->removeListener(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1removeRequestListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaRequestListener *arg2 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaRequestListener **)&jarg2; 
  (arg1)->removeRequestListener(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1removeTransferListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaTransferListener *arg2 = (mega::MegaTransferListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaTransferListener **)&jarg2; 
  (arg1)->removeTransferListener(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1removeGlobalListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaGlobalListener *arg2 = (mega::MegaGlobalListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaGlobalListener **)&jarg2; 
  (arg1)->removeGlobalListener(arg2);
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getCurrentRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaRequest *)(arg1)->getCurrentRequest();
  *(mega::MegaRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getCurrentTransfer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaTransfer *)(arg1)->getCurrentTransfer();
  *(mega::MegaTransfer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getCurrentError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaError *)(arg1)->getCurrentError();
  *(mega::MegaError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getCurrentNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNodeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaNodeList *)(arg1)->getCurrentNodes();
  *(mega::MegaNodeList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getCurrentUsers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaUserList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaUserList *)(arg1)->getCurrentUsers();
  *(mega::MegaUserList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getBase64PwKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getBase64PwKey((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  delete [] result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getStringHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (char *)(arg1)->getStringHash((char const *)arg2,(char const *)arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  delete [] result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1base32ToHandle(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  mega::MegaHandle result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (mega::MegaHandle)mega::MegaApi::base32ToHandle((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1base64ToHandle(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  mega::MegaHandle result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (mega::MegaHandle)mega::MegaApi::base64ToHandle((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1handleToBase64(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  mega::MegaHandle arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mega::MegaHandle)jarg1; 
  result = (char *)mega::MegaApi::handleToBase64(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1userHandleToBase64(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  mega::MegaHandle arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mega::MegaHandle)jarg1; 
  result = (char *)mega::MegaApi::userHandleToBase64(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1addEntropy(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (unsigned int)jarg2; 
  mega::MegaApi::addEntropy(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1retryPendingConnections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool arg2 ;
  bool arg3 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->retryPendingConnections(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1retryPendingConnections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->retryPendingConnections(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1retryPendingConnections_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->retryPendingConnections(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1retryPendingConnections_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->retryPendingConnections();
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1login_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->login((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1login_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->login((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1loginToFolder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->loginToFolder((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1loginToFolder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->loginToFolder((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1fastLogin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mega::MegaRequestListener *arg5 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = *(mega::MegaRequestListener **)&jarg5; 
  (arg1)->fastLogin((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1fastLogin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->fastLogin((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1fastLogin_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->fastLogin((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1fastLogin_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->fastLogin((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1killSession_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaHandle arg2 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (mega::MegaHandle)jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->killSession(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1killSession_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaHandle arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (mega::MegaHandle)jarg2; 
  (arg1)->killSession(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getUserData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaRequestListener *arg2 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaRequestListener **)&jarg2; 
  (arg1)->getUserData(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getUserData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->getUserData();
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getUserData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaUser *arg2 = (mega::MegaUser *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaUser **)&jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->getUserData(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getUserData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaUser *arg2 = (mega::MegaUser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaUser **)&jarg2; 
  (arg1)->getUserData(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getUserData_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->getUserData((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getUserData_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->getUserData((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1dumpSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (char *)(arg1)->dumpSession();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  delete [] result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1dumpXMPPSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (char *)(arg1)->dumpXMPPSession();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1createAccount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mega::MegaRequestListener *arg5 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = *(mega::MegaRequestListener **)&jarg5; 
  (arg1)->createAccount((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1createAccount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->createAccount((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1fastCreateAccount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mega::MegaRequestListener *arg5 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = *(mega::MegaRequestListener **)&jarg5; 
  (arg1)->fastCreateAccount((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1fastCreateAccount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->fastCreateAccount((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1querySignupLink_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->querySignupLink((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1querySignupLink_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->querySignupLink((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1confirmAccount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->confirmAccount((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1confirmAccount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->confirmAccount((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1fastConfirmAccount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->fastConfirmAccount((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1fastConfirmAccount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->fastConfirmAccount((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setProxySettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaProxy *arg2 = (mega::MegaProxy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaProxy **)&jarg2; 
  (arg1)->setProxySettings(arg2);
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getAutoProxySettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaProxy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaProxy *)(arg1)->getAutoProxySettings();
  *(mega::MegaProxy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1isLoggedIn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (int)(arg1)->isLoggedIn();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getMyEmail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (char *)(arg1)->getMyEmail();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  delete [] result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setLogLevel(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  mega::MegaApi::setLogLevel(arg1);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setLoggerObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaLogger *arg1 = (mega::MegaLogger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaLogger **)&jarg1; 
  mega::MegaApi::setLoggerObject(arg1);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1log_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jint jarg4) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  mega::MegaApi::log(arg1,(char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1log_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  mega::MegaApi::log(arg1,(char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1log_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  mega::MegaApi::log(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1createFolder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->createFolder((char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1createFolder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  (arg1)->createFolder((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1moveNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->moveNode(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1moveNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaNode **)&jarg3; 
  (arg1)->moveNode(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1copyNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->copyNode(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1copyNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaNode **)&jarg3; 
  (arg1)->copyNode(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1copyNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jlong jarg5, jobject jarg5_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  char *arg4 = (char *) 0 ;
  mega::MegaRequestListener *arg5 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = *(mega::MegaRequestListener **)&jarg5; 
  (arg1)->copyNode(arg2,arg3,(char const *)arg4,arg5);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1copyNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->copyNode(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1renameNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->renameNode(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1renameNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->renameNode(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->remove(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1sendFileToUser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaUser *arg3 = (mega::MegaUser *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaUser **)&jarg3; 
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->sendFileToUser(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1sendFileToUser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaUser *arg3 = (mega::MegaUser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaUser **)&jarg3; 
  (arg1)->sendFileToUser(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1share_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaUser *arg3 = (mega::MegaUser *) 0 ;
  int arg4 ;
  mega::MegaRequestListener *arg5 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaUser **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(mega::MegaRequestListener **)&jarg5; 
  (arg1)->share(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1share_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaUser *arg3 = (mega::MegaUser *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaUser **)&jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->share(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1share_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  mega::MegaRequestListener *arg5 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  arg5 = *(mega::MegaRequestListener **)&jarg5; 
  (arg1)->share(arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1share_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  (arg1)->share(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1importFileLink_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->importFileLink((char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1importFileLink_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  (arg1)->importFileLink((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getPublicNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->getPublicNode((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getPublicNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->getPublicNode((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getThumbnail_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->getThumbnail(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getThumbnail_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->getThumbnail(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getPreview_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->getPreview(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getPreview_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->getPreview(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getUserAvatar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaUser *arg2 = (mega::MegaUser *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaUser **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->getUserAvatar(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getUserAvatar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaUser *arg2 = (mega::MegaUser *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaUser **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->getUserAvatar(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1cancelGetThumbnail_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->cancelGetThumbnail(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1cancelGetThumbnail_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  (arg1)->cancelGetThumbnail(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1cancelGetPreview_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->cancelGetPreview(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1cancelGetPreview_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  (arg1)->cancelGetPreview(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setThumbnail_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->setThumbnail(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setThumbnail_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setThumbnail(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setPreview_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->setPreview(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setPreview_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setPreview(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setAvatar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->setAvatar((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setAvatar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setAvatar((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setUserAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->setUserAttribute(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setUserAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setUserAttribute(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1exportNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->exportNode(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1exportNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  (arg1)->exportNode(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1disableExport_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->disableExport(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1disableExport_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  (arg1)->disableExport(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1fetchNodes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaRequestListener *arg2 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaRequestListener **)&jarg2; 
  (arg1)->fetchNodes(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1fetchNodes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->fetchNodes();
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getAccountDetails_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaRequestListener *arg2 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaRequestListener **)&jarg2; 
  (arg1)->getAccountDetails(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getAccountDetails_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->getAccountDetails();
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getExtendedAccountDetails_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  mega::MegaRequestListener *arg5 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(mega::MegaRequestListener **)&jarg5; 
  (arg1)->getExtendedAccountDetails(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getExtendedAccountDetails_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->getExtendedAccountDetails(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getExtendedAccountDetails_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->getExtendedAccountDetails(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getExtendedAccountDetails_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->getExtendedAccountDetails(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getExtendedAccountDetails_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->getExtendedAccountDetails();
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getPricing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaRequestListener *arg2 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaRequestListener **)&jarg2; 
  (arg1)->getPricing(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getPricing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->getPricing();
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getPaymentId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaHandle arg2 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (mega::MegaHandle)jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->getPaymentId(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getPaymentId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaHandle arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (mega::MegaHandle)jarg2; 
  (arg1)->getPaymentId(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1submitPurchaseReceipt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->submitPurchaseReceipt((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1submitPurchaseReceipt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->submitPurchaseReceipt((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1exportMasterKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (char *)(arg1)->exportMasterKey();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  delete [] result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1changePassword_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->changePassword((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1changePassword_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->changePassword((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1addContact_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->addContact((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1addContact_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addContact((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1removeContact_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaUser *arg2 = (mega::MegaUser *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaUser **)&jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->removeContact(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1removeContact_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaUser *arg2 = (mega::MegaUser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaUser **)&jarg2; 
  (arg1)->removeContact(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1logout_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaRequestListener *arg2 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaRequestListener **)&jarg2; 
  (arg1)->logout(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1logout_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->logout();
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1localLogout_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaRequestListener *arg2 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaRequestListener **)&jarg2; 
  (arg1)->localLogout(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1localLogout_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->localLogout();
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1submitFeedback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->submitFeedback(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1submitFeedback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->submitFeedback(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1reportDebugEvent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->reportDebugEvent((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1reportDebugEvent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->reportDebugEvent((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1startUpload_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  mega::MegaTransferListener *arg4 = (mega::MegaTransferListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = *(mega::MegaTransferListener **)&jarg4; 
  (arg1)->startUpload((char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1startUpload_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  (arg1)->startUpload((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1startUpload_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  int64_t arg4 ;
  mega::MegaTransferListener *arg5 = (mega::MegaTransferListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = (int64_t)jarg4; 
  arg5 = *(mega::MegaTransferListener **)&jarg5; 
  (arg1)->startUpload((char const *)arg2,arg3,arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1startUpload_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  int64_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = (int64_t)jarg4; 
  (arg1)->startUpload((char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1startUpload_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jlong jarg5, jobject jarg5_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  char *arg4 = (char *) 0 ;
  mega::MegaTransferListener *arg5 = (mega::MegaTransferListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = *(mega::MegaTransferListener **)&jarg5; 
  (arg1)->startUpload((char const *)arg2,arg3,(char const *)arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1startUpload_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->startUpload((char const *)arg2,arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1startUpload_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  char *arg4 = (char *) 0 ;
  int64_t arg5 ;
  mega::MegaTransferListener *arg6 = (mega::MegaTransferListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = (int64_t)jarg5; 
  arg6 = *(mega::MegaTransferListener **)&jarg6; 
  (arg1)->startUpload((char const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1startUpload_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jlong jarg5) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  char *arg4 = (char *) 0 ;
  int64_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = (int64_t)jarg5; 
  (arg1)->startUpload((char const *)arg2,arg3,(char const *)arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1startDownload_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaTransferListener *arg4 = (mega::MegaTransferListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(mega::MegaTransferListener **)&jarg4; 
  (arg1)->startDownload(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1startDownload_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->startDownload(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1startStreaming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  mega::MegaTransferListener *arg5 = (mega::MegaTransferListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int64_t)jarg4; 
  arg5 = *(mega::MegaTransferListener **)&jarg5; 
  (arg1)->startStreaming(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1cancelTransfer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg2 = (mega::MegaTransfer *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaTransfer **)&jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->cancelTransfer(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1cancelTransfer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaTransfer *arg2 = (mega::MegaTransfer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaTransfer **)&jarg2; 
  (arg1)->cancelTransfer(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1cancelTransferByTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->cancelTransferByTag(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1cancelTransferByTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->cancelTransferByTag(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1cancelTransfers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->cancelTransfers(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1cancelTransfers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->cancelTransfers(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1pauseTransfers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool arg2 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->pauseTransfers(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1pauseTransfers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->pauseTransfers(arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1pauseTransfers_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool arg2 ;
  int arg3 ;
  mega::MegaRequestListener *arg4 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = *(mega::MegaRequestListener **)&jarg4; 
  (arg1)->pauseTransfers(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1pauseTransfers_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  (arg1)->pauseTransfers(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1areTansfersPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->areTansfersPaused(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1setUploadLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUploadLimit(arg2);
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getTransfers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaTransferList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaTransferList *)(arg1)->getTransfers();
  *(mega::MegaTransferList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getTransferByTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  mega::MegaTransfer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mega::MegaTransfer *)(arg1)->getTransferByTag(arg2);
  *(mega::MegaTransfer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getTransfers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int arg2 ;
  mega::MegaTransferList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mega::MegaTransferList *)(arg1)->getTransfers(arg2);
  *(mega::MegaTransferList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->update();
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1isWaiting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (bool)(arg1)->isWaiting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNumPendingUploads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (int)(arg1)->getNumPendingUploads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNumPendingDownloads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (int)(arg1)->getNumPendingDownloads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getTotalUploads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (int)(arg1)->getTotalUploads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getTotalDownloads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (int)(arg1)->getTotalDownloads();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1resetTotalDownloads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->resetTotalDownloads();
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1resetTotalUploads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->resetTotalUploads();
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getTotalDownloadedBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (long long)(arg1)->getTotalDownloadedBytes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getTotalUploadedBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (long long)(arg1)->getTotalUploadedBytes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1updateStats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  (arg1)->updateStats();
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNumChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (int)(arg1)->getNumChildren(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNumChildFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (int)(arg1)->getNumChildFiles(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNumChildFolders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (int)(arg1)->getNumChildFolders(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getChildren_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  int arg3 ;
  mega::MegaNodeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (mega::MegaNodeList *)(arg1)->getChildren(arg2,arg3);
  *(mega::MegaNodeList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getChildren_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaNodeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (mega::MegaNodeList *)(arg1)->getChildren(arg2);
  *(mega::MegaNodeList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getIndex(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (int)(arg1)->getIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getChildNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (mega::MegaNode *)(arg1)->getChildNode(arg2,(char const *)arg3);
  *(mega::MegaNode **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getParentNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (mega::MegaNode *)(arg1)->getParentNode(arg2);
  *(mega::MegaNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNodePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (char *)(arg1)->getNodePath(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  delete [] result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNodeByPath_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  result = (mega::MegaNode *)(arg1)->getNodeByPath((char const *)arg2,arg3);
  *(mega::MegaNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNodeByPath_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (mega::MegaNode *)(arg1)->getNodeByPath((char const *)arg2);
  *(mega::MegaNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNodeByHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaHandle arg2 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = (mega::MegaHandle)jarg2; 
  result = (mega::MegaNode *)(arg1)->getNodeByHandle(arg2);
  *(mega::MegaNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getContacts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaUserList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaUserList *)(arg1)->getContacts();
  *(mega::MegaUserList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getContact(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaUser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (mega::MegaUser *)(arg1)->getContact((char const *)arg2);
  *(mega::MegaUser **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getInShares_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaUser *arg2 = (mega::MegaUser *) 0 ;
  mega::MegaNodeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaUser **)&jarg2; 
  result = (mega::MegaNodeList *)(arg1)->getInShares(arg2);
  *(mega::MegaNodeList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getInShares_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNodeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaNodeList *)(arg1)->getInShares();
  *(mega::MegaNodeList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1isShared(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (bool)(arg1)->isShared(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getOutShares_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaShareList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaShareList *)(arg1)->getOutShares();
  *(mega::MegaShareList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getOutShares_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaShareList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (mega::MegaShareList *)(arg1)->getOutShares(arg2);
  *(mega::MegaShareList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getAccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (int)(arg1)->getAccess(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (long long)(arg1)->getSize(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getFingerprint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getFingerprint((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  delete [] result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getFingerprint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (char *)(arg1)->getFingerprint(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  delete [] result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNodeByFingerprint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (mega::MegaNode *)(arg1)->getNodeByFingerprint((char const *)arg2);
  *(mega::MegaNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNodeByFingerprint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  result = (mega::MegaNode *)(arg1)->getNodeByFingerprint((char const *)arg2,arg3);
  *(mega::MegaNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1hasFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->hasFingerprint((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getCRC_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getCRC((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  delete [] result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getCRC_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  result = (char *)(arg1)->getCRC(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  delete [] result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getNodeByCRC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(mega::MegaNode **)&jarg3; 
  result = (mega::MegaNode *)(arg1)->getNodeByCRC((char const *)arg2,arg3);
  *(mega::MegaNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1checkAccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  int arg3 ;
  SwigValueWrapper< mega::MegaError > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->checkAccess(arg2,arg3);
  *(mega::MegaError **)&jresult = new mega::MegaError((const mega::MegaError &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1checkMove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaNode *arg3 = (mega::MegaNode *) 0 ;
  SwigValueWrapper< mega::MegaError > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaNode **)&jarg3; 
  result = (arg1)->checkMove(arg2,arg3);
  *(mega::MegaError **)&jresult = new mega::MegaError((const mega::MegaError &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getRootNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaNode *)(arg1)->getRootNode();
  *(mega::MegaNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getInboxNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaNode *)(arg1)->getInboxNode();
  *(mega::MegaNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getRubbishNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (mega::MegaNode *)(arg1)->getRubbishNode();
  *(mega::MegaNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  mega::MegaNodeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (mega::MegaNodeList *)(arg1)->search(arg2,(char const *)arg3,arg4);
  *(mega::MegaNodeList **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1search_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  char *arg3 = (char *) 0 ;
  mega::MegaNodeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (mega::MegaNodeList *)(arg1)->search(arg2,(char const *)arg3);
  *(mega::MegaNodeList **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1processMegaTree_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaTreeProcessor *arg3 = (mega::MegaTreeProcessor *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaTreeProcessor **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->processMegaTree(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1processMegaTree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  mega::MegaNode *arg2 = (mega::MegaNode *) 0 ;
  mega::MegaTreeProcessor *arg3 = (mega::MegaTreeProcessor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = *(mega::MegaNode **)&jarg2; 
  arg3 = *(mega::MegaTreeProcessor **)&jarg3; 
  result = (bool)(arg1)->processMegaTree(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (char *)(arg1)->getVersion();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1getUserAgent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  result = (char *)(arg1)->getUserAgent();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1changeApiUrl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->changeApiUrl((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1changeApiUrl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->changeApiUrl((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1nameToLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->nameToLocal((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1localToName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->localToName((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1base64ToBase32(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)mega::MegaApi::base64ToBase32((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1base32ToBase64(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)mega::MegaApi::base32ToBase64((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1loadBalancing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  mega::MegaRequestListener *arg3 = (mega::MegaRequestListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(mega::MegaRequestListener **)&jarg3; 
  (arg1)->loadBalancing((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1loadBalancing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mega::MegaApi *arg1 = (mega::MegaApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->loadBalancing((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1strdup(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)mega::MegaApi::strdup((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_MegaApi_1removeRecursively(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  mega::MegaApi::removeRecursively((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaAccountBalance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaAccountBalance *arg1 = (mega::MegaAccountBalance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaAccountBalance **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountBalance_1getAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mega::MegaAccountBalance *arg1 = (mega::MegaAccountBalance *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountBalance **)&jarg1; 
  result = (double)((mega::MegaAccountBalance const *)arg1)->getAmount();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountBalance_1getCurrency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaAccountBalance *arg1 = (mega::MegaAccountBalance *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountBalance **)&jarg1; 
  result = (char *)((mega::MegaAccountBalance const *)arg1)->getCurrency();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaAccountBalance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaAccountBalance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaAccountBalance *)new mega::MegaAccountBalance();
  *(mega::MegaAccountBalance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaAccountSession(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaAccountSession *arg1 = (mega::MegaAccountSession *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaAccountSession **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountSession_1getCreationTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaAccountSession *arg1 = (mega::MegaAccountSession *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountSession **)&jarg1; 
  result = (int64_t)((mega::MegaAccountSession const *)arg1)->getCreationTimestamp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountSession_1getMostRecentUsage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaAccountSession *arg1 = (mega::MegaAccountSession *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountSession **)&jarg1; 
  result = (int64_t)((mega::MegaAccountSession const *)arg1)->getMostRecentUsage();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountSession_1getUserAgent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaAccountSession *arg1 = (mega::MegaAccountSession *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountSession **)&jarg1; 
  result = (char *)((mega::MegaAccountSession const *)arg1)->getUserAgent();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountSession_1getIP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaAccountSession *arg1 = (mega::MegaAccountSession *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountSession **)&jarg1; 
  result = (char *)((mega::MegaAccountSession const *)arg1)->getIP();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountSession_1getCountry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaAccountSession *arg1 = (mega::MegaAccountSession *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountSession **)&jarg1; 
  result = (char *)((mega::MegaAccountSession const *)arg1)->getCountry();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountSession_1isCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaAccountSession *arg1 = (mega::MegaAccountSession *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountSession **)&jarg1; 
  result = (bool)((mega::MegaAccountSession const *)arg1)->isCurrent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountSession_1isAlive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mega::MegaAccountSession *arg1 = (mega::MegaAccountSession *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountSession **)&jarg1; 
  result = (bool)((mega::MegaAccountSession const *)arg1)->isAlive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountSession_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaAccountSession *arg1 = (mega::MegaAccountSession *) 0 ;
  mega::MegaHandle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountSession **)&jarg1; 
  result = (mega::MegaHandle)((mega::MegaAccountSession const *)arg1)->getHandle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaAccountSession(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaAccountSession *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaAccountSession *)new mega::MegaAccountSession();
  *(mega::MegaAccountSession **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaAccountPurchase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaAccountPurchase *arg1 = (mega::MegaAccountPurchase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaAccountPurchase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountPurchase_1getTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaAccountPurchase *arg1 = (mega::MegaAccountPurchase *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountPurchase **)&jarg1; 
  result = (int64_t)((mega::MegaAccountPurchase const *)arg1)->getTimestamp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountPurchase_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaAccountPurchase *arg1 = (mega::MegaAccountPurchase *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountPurchase **)&jarg1; 
  result = (char *)((mega::MegaAccountPurchase const *)arg1)->getHandle();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountPurchase_1getCurrency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaAccountPurchase *arg1 = (mega::MegaAccountPurchase *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountPurchase **)&jarg1; 
  result = (char *)((mega::MegaAccountPurchase const *)arg1)->getCurrency();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountPurchase_1getAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mega::MegaAccountPurchase *arg1 = (mega::MegaAccountPurchase *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountPurchase **)&jarg1; 
  result = (double)((mega::MegaAccountPurchase const *)arg1)->getAmount();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountPurchase_1getMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaAccountPurchase *arg1 = (mega::MegaAccountPurchase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountPurchase **)&jarg1; 
  result = (int)((mega::MegaAccountPurchase const *)arg1)->getMethod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaAccountPurchase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaAccountPurchase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaAccountPurchase *)new mega::MegaAccountPurchase();
  *(mega::MegaAccountPurchase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaAccountTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaAccountTransaction *arg1 = (mega::MegaAccountTransaction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaAccountTransaction **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountTransaction_1getTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaAccountTransaction *arg1 = (mega::MegaAccountTransaction *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountTransaction **)&jarg1; 
  result = (int64_t)((mega::MegaAccountTransaction const *)arg1)->getTimestamp();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountTransaction_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaAccountTransaction *arg1 = (mega::MegaAccountTransaction *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountTransaction **)&jarg1; 
  result = (char *)((mega::MegaAccountTransaction const *)arg1)->getHandle();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountTransaction_1getCurrency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mega::MegaAccountTransaction *arg1 = (mega::MegaAccountTransaction *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountTransaction **)&jarg1; 
  result = (char *)((mega::MegaAccountTransaction const *)arg1)->getCurrency();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountTransaction_1getAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mega::MegaAccountTransaction *arg1 = (mega::MegaAccountTransaction *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountTransaction **)&jarg1; 
  result = (double)((mega::MegaAccountTransaction const *)arg1)->getAmount();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaAccountTransaction(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaAccountTransaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaAccountTransaction *)new mega::MegaAccountTransaction();
  *(mega::MegaAccountTransaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaAccountDetails(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getProLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  result = (int)(arg1)->getProLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getStorageMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  result = (long long)(arg1)->getStorageMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getStorageUsed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  result = (long long)(arg1)->getStorageUsed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getTransferMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  result = (long long)(arg1)->getTransferMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getTransferOwnUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  result = (long long)(arg1)->getTransferOwnUsed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getNumUsageItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  result = (int)(arg1)->getNumUsageItems();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getStorageUsed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  mega::MegaHandle arg2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  arg2 = (mega::MegaHandle)jarg2; 
  result = (long long)(arg1)->getStorageUsed(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getNumFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  mega::MegaHandle arg2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  arg2 = (mega::MegaHandle)jarg2; 
  result = (long long)(arg1)->getNumFiles(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getNumFolders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  mega::MegaHandle arg2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  arg2 = (mega::MegaHandle)jarg2; 
  result = (long long)(arg1)->getNumFolders(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  mega::MegaAccountDetails *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  result = (mega::MegaAccountDetails *)(arg1)->copy();
  *(mega::MegaAccountDetails **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getNumBalances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  result = (int)((mega::MegaAccountDetails const *)arg1)->getNumBalances();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getBalance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  int arg2 ;
  mega::MegaAccountBalance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mega::MegaAccountBalance *)((mega::MegaAccountDetails const *)arg1)->getBalance(arg2);
  *(mega::MegaAccountBalance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getNumSessions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  result = (int)((mega::MegaAccountDetails const *)arg1)->getNumSessions();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  int arg2 ;
  mega::MegaAccountSession *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mega::MegaAccountSession *)((mega::MegaAccountDetails const *)arg1)->getSession(arg2);
  *(mega::MegaAccountSession **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getNumPurchases(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  result = (int)((mega::MegaAccountDetails const *)arg1)->getNumPurchases();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getPurchase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  int arg2 ;
  mega::MegaAccountPurchase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mega::MegaAccountPurchase *)((mega::MegaAccountDetails const *)arg1)->getPurchase(arg2);
  *(mega::MegaAccountPurchase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getNumTransactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  result = (int)((mega::MegaAccountDetails const *)arg1)->getNumTransactions();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaAccountDetails_1getTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *arg1 = (mega::MegaAccountDetails *) 0 ;
  int arg2 ;
  mega::MegaAccountTransaction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaAccountDetails **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mega::MegaAccountTransaction *)((mega::MegaAccountDetails const *)arg1)->getTransaction(arg2);
  *(mega::MegaAccountTransaction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaAccountDetails(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaAccountDetails *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaAccountDetails *)new mega::MegaAccountDetails();
  *(mega::MegaAccountDetails **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_delete_1MegaPricing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1getNumProducts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  result = (int)(arg1)->getNumProducts();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1getHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  int arg2 ;
  mega::MegaHandle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mega::MegaHandle)(arg1)->getHandle(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1getProLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getProLevel(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1getGBStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getGBStorage(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1getGBTransfer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getGBTransfer(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1getMonths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getMonths(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1getAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getAmount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1getCurrency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getCurrency(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getDescription(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1getIosID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getIosID(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1getAndroidID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getAndroidID(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_MegaPricing_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mega::MegaPricing *arg1 = (mega::MegaPricing *) 0 ;
  mega::MegaPricing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mega::MegaPricing **)&jarg1; 
  result = (mega::MegaPricing *)(arg1)->copy();
  *(mega::MegaPricing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nz_mega_sdk_megaJNI_new_1MegaPricing(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mega::MegaPricing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mega::MegaPricing *)new mega::MegaPricing();
  *(mega::MegaPricing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nz_mega_sdk_megaJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[31] = {
    {
      "SwigDirector_MegaGfxProcessor_readBitmap", "(Lnz/mega/sdk/MegaGfxProcessor;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_MegaGfxProcessor_getWidth", "(Lnz/mega/sdk/MegaGfxProcessor;)I" 
    },
    {
      "SwigDirector_MegaGfxProcessor_getHeight", "(Lnz/mega/sdk/MegaGfxProcessor;)I" 
    },
    {
      "SwigDirector_MegaGfxProcessor_getBitmapDataSize", "(Lnz/mega/sdk/MegaGfxProcessor;IIIIII)I" 
    },
    {
      "SwigDirector_MegaGfxProcessor_getBitmapData", "(Lnz/mega/sdk/MegaGfxProcessor;[B)Z" 
    },
    {
      "SwigDirector_MegaGfxProcessor_freeBitmap", "(Lnz/mega/sdk/MegaGfxProcessor;)V" 
    },
    {
      "SwigDirector_MegaLogger_log", "(Lnz/mega/sdk/MegaLogger;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_MegaTreeProcessor_processMegaNode", "(Lnz/mega/sdk/MegaTreeProcessor;J)Z" 
    },
    {
      "SwigDirector_MegaRequestListener_onRequestStart", "(Lnz/mega/sdk/MegaRequestListener;JJ)V" 
    },
    {
      "SwigDirector_MegaRequestListener_onRequestFinish", "(Lnz/mega/sdk/MegaRequestListener;JJJ)V" 
    },
    {
      "SwigDirector_MegaRequestListener_onRequestUpdate", "(Lnz/mega/sdk/MegaRequestListener;JJ)V" 
    },
    {
      "SwigDirector_MegaRequestListener_onRequestTemporaryError", "(Lnz/mega/sdk/MegaRequestListener;JJJ)V" 
    },
    {
      "SwigDirector_MegaTransferListener_onTransferStart", "(Lnz/mega/sdk/MegaTransferListener;JJ)V" 
    },
    {
      "SwigDirector_MegaTransferListener_onTransferFinish", "(Lnz/mega/sdk/MegaTransferListener;JJJ)V" 
    },
    {
      "SwigDirector_MegaTransferListener_onTransferUpdate", "(Lnz/mega/sdk/MegaTransferListener;JJ)V" 
    },
    {
      "SwigDirector_MegaTransferListener_onTransferTemporaryError", "(Lnz/mega/sdk/MegaTransferListener;JJJ)V" 
    },
    {
      "SwigDirector_MegaTransferListener_onTransferData", "(Lnz/mega/sdk/MegaTransferListener;JJ[B)Z" 
    },
    {
      "SwigDirector_MegaGlobalListener_onUsersUpdate", "(Lnz/mega/sdk/MegaGlobalListener;JJ)V" 
    },
    {
      "SwigDirector_MegaGlobalListener_onNodesUpdate", "(Lnz/mega/sdk/MegaGlobalListener;JJ)V" 
    },
    {
      "SwigDirector_MegaGlobalListener_onReloadNeeded", "(Lnz/mega/sdk/MegaGlobalListener;J)V" 
    },
    {
      "SwigDirector_MegaListener_onRequestStart", "(Lnz/mega/sdk/MegaListener;JJ)V" 
    },
    {
      "SwigDirector_MegaListener_onRequestFinish", "(Lnz/mega/sdk/MegaListener;JJJ)V" 
    },
    {
      "SwigDirector_MegaListener_onRequestUpdate", "(Lnz/mega/sdk/MegaListener;JJ)V" 
    },
    {
      "SwigDirector_MegaListener_onRequestTemporaryError", "(Lnz/mega/sdk/MegaListener;JJJ)V" 
    },
    {
      "SwigDirector_MegaListener_onTransferStart", "(Lnz/mega/sdk/MegaListener;JJ)V" 
    },
    {
      "SwigDirector_MegaListener_onTransferFinish", "(Lnz/mega/sdk/MegaListener;JJJ)V" 
    },
    {
      "SwigDirector_MegaListener_onTransferUpdate", "(Lnz/mega/sdk/MegaListener;JJ)V" 
    },
    {
      "SwigDirector_MegaListener_onTransferTemporaryError", "(Lnz/mega/sdk/MegaListener;JJJ)V" 
    },
    {
      "SwigDirector_MegaListener_onUsersUpdate", "(Lnz/mega/sdk/MegaListener;JJ)V" 
    },
    {
      "SwigDirector_MegaListener_onNodesUpdate", "(Lnz/mega/sdk/MegaListener;JJ)V" 
    },
    {
      "SwigDirector_MegaListener_onReloadNeeded", "(Lnz/mega/sdk/MegaListener;J)V" 
    }
  };
  Swig::jclass_megaJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_megaJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

